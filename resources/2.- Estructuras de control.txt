4.1 Estructuras de control
--------------------------

Operadores condicionales

>
>=
==
<=
<
!=

and or &&
or  or |
not or ~

resultado = ( a > b ) -> imprime True or False
print(resultado)

sentencias condicionales
------------------------

if
--

if condicion:
	acciones
elif condicion:
	acciones
else # si todas las condiciones anteriores no se han ejecutado
	acciones

while
-----

while <expr>:
    <statement(s)>
else:
    <additional_statement(s)>
    
The <additional_statement(s)> specified in the else clause will be executed when the while loop terminates.

break
continue

for
---

for <var> in <iterable>:
    <statement(s)>
else:
    <statement(s)>
    
A for loop can have an else clause as well. The interpretation is analogous to that of a while loop. The else clause will be executed if the loop terminates through exhaustion of the iterable

break
continue

Range
-----

Definition and Usage

The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

Syntax
range(start, stop, step)

Parameter	Description
start	Optional. An integer number specifying at which position to start. Default is 0
stop	Required. An integer number specifying at which position to stop (not included).
step	Optional. An integer number specifying the incrementation. Default is 1

len
---

Definition and Usage

The len() function returns the number of items in an object.

When the object is a string, the len() function returns the number of characters in the string.

Syntax
len(object)

Parameter	Description
object	Required. An object. Must be a sequence or a collection

match
-----

match term:
    case pattern-1:
         action-1
    case pattern-2:
         action-2
    case pattern-3:
         action-3
    case _:
        action-default
        
ambito de una variable
----------------------

global - general
bucle - for, while
clase - propiedades
funciones -

palabras reservada pass
-----------------------

pass - no hace nada
